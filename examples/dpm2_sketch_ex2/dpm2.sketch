dtmc

// To make it more challenging, we can extend the model and consider low and  high priority requests
// using two request queues.

const int qMax = 10;

const double T_PW = 1000;
const double T_LH = 0.05;
const double T_LL = 0.1;

#genCONST

const int LT1 = 3;
const int LT2 = 5;
const int LT3 = 7;
const int HT1 = 3;
const int HT2 = 5;
const int HT3 = 7;

// This system can achieve

//R{"power"}<= 18000 [ F (bat=0) ]

//R{"lostH"}<= 0.3 [ F (bat=0) ]

//R{"lostL"}<= 0.6 [ F (bat=0) ]


module CLOCK

	c : [0..1];

	[tick1] bat>0 & c=0 -> (c'=1);
	[tick2] bat>0 & c=1 -> (c'=0);

endmodule

// POWER MANAGER

module PM

	pm  :  [0..3] init 3;
	// 0 - go to active
	// 1 - go to active for LOW
	// 2 - go to idle
	// 3 - go to sleep


	#genQIDBeg(tick1, {qL, [0,10], 3},
	{q, [0,10], 3}:
	{pm, {0, 1, 2, 3}})
	#genQIDEnd
	
	
// unused sketch	(tick1, {qL, [0,10], 3},
//	{q, [0,10], 3}:
//	{pm, {0, 1, 2, 3}})
	

endmodule

// SERVICE PROVIDER

module SP

	sp : [0..8] init 3;
	// 0 active
	// 1 active for LOW
	// 2 idle
	// 3 sleep

	// 4 active_both_to_sleep
	// 5 idle_to_sleep

	// 6 sleep_to_idle
	// 7 sleep_to_active
	// 8 sleep_to_active_L

	// states where PM has no control (transient states)

	[tick2] sp=4  -> 0.9  : (sp'=4) + 0.1  : (sp'=3);
	[tick2] sp=5  -> 0.9   : (sp'=5) + 0.1   : (sp'=3);

	[tick2] sp=6  -> 0.9   : (sp'=6) + 0.1   : (sp'=2);

	[tick2] sp=7  -> 0.9  : (sp'=7) + 0.1  : (sp'=0);
	[tick2] sp=8  -> 0.9  : (sp'=8) + 0.1  : (sp'=1);


	// states where PM has control
	// goto_active
	[tick2] sp=0 & pm=0 -> (sp'=0); // from active
	[tick2] sp=1 & pm=0 -> (sp'=0); // from activeL
	[tick2] sp=2 & pm=0 -> (sp'=0); // from idle
	[tick2] sp=3 & pm=0 -> (sp'=7); // from sleep


	// goto_active_L
	[tick2] sp=0 & pm=1 -> (sp'=1); // from active
	[tick2] sp=1 & pm=1 -> (sp'=1); // from activeL
	[tick2] sp=2 & pm=1 -> (sp'=1); // from idle
	[tick2] sp=3 & pm=1 -> (sp'=8); // from sleep

	// goto_idle
	[tick2] sp=0 & pm=2 -> (sp'=2); // from active
	[tick2] sp=1 & pm=2 -> (sp'=2); // from active_L
	[tick2] sp=2 & pm=2 -> (sp'=2); // from idle
	[tick2] sp=3 & pm=2 -> (sp'=6); // from sleep

	// goto_sleep
	[tick2] sp=0 & pm=3 -> (sp'=4); // from active
	[tick2] sp=1 & pm=3 -> (sp'=4); // from active_L
	[tick2] sp=2 & pm=3 -> (sp'=5); // idle
	[tick2] sp=3 & pm=3 -> (sp'=3); // sleep

endmodule


// SERVICE REQUESTER
module SR

	//a two-queue varinat

	sr : [0..2] init 0; // 0 - idle, 1 - Hreq, 2-Lreq

	[tick2] sr=0 -> 0.898: (sr'=0) + 0.051: (sr'=1) + 0.051: (sr'=2);
	[tick2] sr=1 -> 0.254: (sr'=0) + 0.373: (sr'=1) + 0.373: (sr'=2);
	[tick2] sr=2 -> 0.254: (sr'=0) + 0.373: (sr'=1) + 0.373: (sr'=2);

endmodule


// SERVICE REQUEST QUEUES
module SRQ

	q : [0..qMax] init 0;
	qL : [0..qMax] init 0;

	[tick2] sr=0 & sp!=0 & sp!=1 -> true; // do not serve and nothing arrives

	[tick2] sr=1 & sp!=0 & sp!=1 -> (q'=min(q+1,qMax)); // do not serve and a request arrives
	[tick2] sr=2 & sp!=0 & sp!=1 -> (qL'=min(qL+1,qMax)); // do not serve and a request arrives

	[tick2] sr=0 & sp=0 -> (q'=max(q-1,0)); // serve and nothing arrives
	[tick2] sr=0 & sp=1 -> (qL'=max(qL-1,0)); // serve and nothing arrives

	// serve and a request arrives arrives -- it actually performs two actions
	[tick2] sr=2 & sp=0 -> (q'=max(q-1,0)) & (qL'=min(qL+1,qMax));
	[tick2] sr=1 & sp=1 -> (qL'=max(qL-1,0)) & (q'=min(q+1,qMax));

	[tick2] sr=1 & sp=0 -> true;
	[tick2] sr=2 & sp=1 -> true;

endmodule





// BATTERY
module BAT

	bat : [0..1] init 1; // 0 empty, 1 - operational

	[] bat=0 -> (bat'=0); // loop when battery empty

	[tick2] bat=1 -> 0.0001 : (bat'=0) + 0.9999 : (bat'=1);

endmodule


// queue size
rewards "queueH"

	c=1 : q;

endrewards

rewards "queueL"

	c=1 : qL;

endrewards

// customers lost
rewards "lostH"

	[tick2] q=qMax & sr=1 & sp!=0 : 1;

endrewards

rewards "lostL"

	[tick2] qL=qMax & sr=2 & sp!=1 : 1;

endrewards




// power consumption
rewards "power"

// in contrasr to the PRISM model we assume that the transient states have the power consuption
// equal to the source state

	sp=1 & c=1 : 2.5;
	sp=0 & c=1 : 2.5;
	sp=4 & c=1 : 2.5;

	sp=2 & c=1 : 1.5;
	sp=5 & c=1 : 1.5;

	sp=3 & c=1 : 0.1;
	sp=6 & c=1 : 0.1;
	sp=7 & c=1 : 0.1;
	sp=8 & c=1 : 0.1;

endrewards

// time
rewards "time"

    [tick2] true : 1;

endrewards

label "finished" = bat = 0;
