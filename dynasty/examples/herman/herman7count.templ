// herman's self stabilising algorithm [Her90]
// gxn/dxp 13/07/02

// the procotol is synchronous with no nondeterminism (a DTMC)
dtmc

const double pFair = 0.5;
const double pUnfairLow = 0.4;
const double pUnfairHigh = 1 - pUnfairLow;
const int MAXMEM = 1;

const int M0FAIR;
const int M1FAIR;
const int M0A;
const int M0B;
const int M0C;
const int M1A;
const int M1B;
const int M1C;


module initialise
    start : [0..1] init 0;
    [go] start = 0 -> (start'=1);
    [step] start = 1 -> (start'=1);
endmodule


// module for process 1
module process1

	// Boolean variable for process 1
	x1 : [0..1] init 0;
	m1 : [0..MAXMEM] init 0;

    [go]  (true) -> 0.5: (x1'=0) + 0.5: (x1'=1);

	[step]  (x1=x7) & m1 = 0 & M0FAIR=0 -> pUnfairLow : (x1'=0) & (m1'=M0A) + 1-pUnfairLow : (x1'=1) & (m1'=M0B);
	[step]  (x1=x7) & m1 = 0 & M0FAIR=1 -> pFair : (x1'=0) & (m1'=M0A) + 1-pFair : (x1'=1) & (m1'=M0B);
	[step]  (x1=x7) & m1 = 0 & M0FAIR=2 -> pUnfairHigh : (x1'=0) & (m1'=M0A) + 1-pUnfairHigh : (x1'=1) & (m1'=M0B);
	[step] !(x1=x7) & m1 = 0 -> (x1'=x7) & (m1'=M0C);

	[step]  (x1=x7) & m1 = 1 & M1FAIR=0 -> pUnfairLow : (x1'=0) & (m1'=M1A) + 1-pUnfairLow : (x1'=1) & (m1'=M1B);
	[step]  (x1=x7) & m1 = 1 & M1FAIR=1 -> pFair : (x1'=0) & (m1'=M1A) + 1-pFair : (x1'=1) & (m1'=M1B);
	[step]  (x1=x7) & m1 = 1 & M1FAIR=2 -> pUnfairHigh : (x1'=0) & (m1'=M1A) + 1-pUnfairHigh : (x1'=1) & (m1'=M1B);
	[step] !(x1=x7) & m1 = 1 -> (x1'=x7) & (m1'=M1C);

endmodule

// add further processes through renaming
module process2 = process1 [ x1=x2, x7=x1, m1=m2 ] endmodule
module process3 = process1 [ x1=x3, x7=x2, m1=m3 ] endmodule
module process4 = process1 [ x1=x4, x7=x3, m1=m4 ] endmodule
//module process5 = process1 [ x1=x5, x7=x4, m1=m5 ] endmodule
//module process6 = process1 [ x1=x6, x7=x5, m1=m6 ] endmodule
module process7 = process1 [ x1=x7, x7=x4, m1=m7 ] endmodule

// cost - 1 in each state (expected number of steps)
rewards "steps"
	true : 1;
endrewards

// set of initial states: all (i.e. any possible initial configuration of tokens)

// formula, for use in properties: number of tokens
// (i.e. number of processes that have the same value as the process to their left)
//formula num_tokens = (x1=x2?1:0)+(x2=x3?1:0)+(x3=x4?1:0)+(x4=x5?1:0)+(x5=x6?1:0)+(x6=x7?1:0)+(x7=x1?1:0);
formula num_tokens = (x1=x2?1:0)+(x2=x3?1:0)+(x3=x4?1:0)+(x4=x7?1:0)+(x7=x1?1:0);


// label - stable configurations (1 token)
label "stable" = num_tokens=1;

